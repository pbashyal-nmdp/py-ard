#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#    py-ard
#    Copyright (c) 2020 Be The Match operated by National Marrow Donor Program. All Rights Reserved.
#
#    This library is free software; you can redistribute it and/or modify it
#    under the terms of the GNU Lesser General Public License as published
#    by the Free Software Foundation; either version 3 of the License, or (at
#    your option) any later version.
#
#    This library is distributed in the hope that it will be useful, but WITHOUT
#    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or
#    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
#    License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with this library;  if not, write to the Free Software Foundation,
#    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
#
#    > http://www.fsf.org/licensing/licenses/lgpl.html
#    > http://www.opensource.org/licenses/lgpl-license.php
#
import argparse

import pyard


def get_imgt_version(imgt_version):
    if imgt_version:
        version = imgt_version.replace(".", "")
        if version.isdigit():
            return version
        raise RuntimeError(
            f"{imgt_version} is not a valid IMGT database version number"
        )
    return None


def get_gl_string(args):
    if args.gl_string_arg:
        return args.gl_string_arg
    if args.gl_string:
        return args.gl_string

    print("No GL String provided")
    print(usage())
    exit(1)


def usage() -> str:
    return """pyard
        [--imgt-version <IMGT DB Version>]
        [--data-dir <directory for db file>]
        [--gl <gl-string> --r <redux_type>]
        [gl-string redux_type]"""


def get_redux_type(args):
    if args.redux_type_arg:
        return args.redux_type_arg

    if args.redux_type:
        return args.redux_type

    return None


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        usage=usage(),
        description="""py-ard tool to reduce GL String""",
    )
    parser.add_argument("gl_string", type=str, nargs="?")
    parser.add_argument("redux_type", type=str, nargs="?")
    parser.add_argument("--imgt-version", required=False, dest="imgt_version")
    parser.add_argument("--data-dir", required=False, dest="data_dir")
    parser.add_argument("--gl", required=False, dest="gl_string_arg")
    parser.add_argument(
        "-r", choices=pyard.pyard.reduction_types, required=False, dest="redux_type_arg"
    )

    args = parser.parse_args()

    imgt_version = get_imgt_version(args.imgt_version)
    data_dir = args.data_dir

    gl_string = get_gl_string(args)
    redux_type = get_redux_type(args)

    if imgt_version:
        if data_dir:
            ard = pyard.ARD(imgt_version=imgt_version, data_dir=data_dir)
        else:
            ard = pyard.ARD(imgt_version=imgt_version)
    else:
        if data_dir:
            ard = pyard.ARD(data_dir=data_dir)
        else:
            ard = pyard.ARD()

    if redux_type:
        print(ard.redux_gl(gl_string, redux_type))
    else:
        for redux_type in pyard.pyard.reduction_types:
            print(f"{redux_type:3}: \t{ard.redux_gl(gl_string, redux_type)}")

    del ard
